<?php

namespace App\Http\Controllers;

use App\Models\Complaint;
use App\Models\Officer;
use App\Models\State;
use App\Models\User;
use App\Notifications\NewComplaintSubmitted;
use App\Notifications\NewUserCreated;
use Illuminate\Http\Request;
use Illuminate\Support\Str;
use Illuminate\Support\Facades\Storage;
use Illuminate\Support\Facades\Hash;
use Illuminate\Support\Facades\Auth;

class ComplaintController extends Controller
{
    public function create()
    {
        $states = State::with('cities')->get();
        return view('complaints.create', compact('states'));
    }

    public function index()
    {
        $complaints = auth()->user()->complaints()->get();
        return view('complaints.index', compact('complaints'));
    }

    public function store(Request $request)
    {
        $validatedData = $request->validate([
            'description' => 'required|string',
            'incident_date' => 'required|date',
            'court_name' => 'required|string',
            'judge_name' => 'nullable|string|max:255',
            'prosecutor_name' => 'nullable|string|max:255',
            'prosecutor_number' => 'nullable|string|max:15',
            'prosecutor_email' => 'nullable|email|max:255',
            'defendant_status' => 'required|string|in:in_jail,on_bond,unknown',
            'autogenerated_password' => 'nullable|string',
            'custom_type' => 'nullable|string|max:255',
            'officer_name' => 'nullable|string|max:255',
            'officer_rank' => 'nullable|string|max:255',
            'officer_division' => 'nullable|string|max:255',
            'officer_badge_number' => 'nullable|string|max:255',
            'attachments.*' => 'file|mimes:jpg,jpeg,png,gif,mp4,pdf,doc,docx|max:10240',
            'first_name' => 'required|nullable|string|max:255',
            'last_name' => 'required|nullable|string|max:255',
            'phone' => 'required|nullable|string|max:15',
            'email' => 'required|nullable|email|unique:users,email',
            'password' => 'required_if:autogenerated_password,off|nullable|string|min:8',
            'address' => 'required|nullable|string|max:255',
            'person_city' => 'required|nullable|string|max:255',
            'person_state' => 'required|nullable|string|max:255',
            'zip' => 'required|nullable|string|max:10',
            'witnesses.*.name' => 'nullable|string|max:255',
            'witnesses.*.contact' => 'nullable|string|max:255',
            'witnesses.*.email' => 'nullable|email|max:255',
        ]);

        $password = $validatedData['autogenerated_password'] === 'on' ? Str::random(8) : $validatedData['password'];

        $user = User::updateOrCreate(
            ['email' => $validatedData['email']],
            [
                'name' => $validatedData['first_name'] . ' ' . $validatedData['last_name'],
                'password' => Hash::make($password),
                'phone' => $validatedData['phone'],
                'address' => $validatedData['address'],
                'city' => $validatedData['person_city'],
                'state' => $validatedData['person_state'],
                'zip' => $validatedData['zip'],
            ]
        );

        if ($user->wasRecentlyCreated) {
            $user->notify(new NewUserCreated($user, auth()->user(), $password));
        }

        $complaint = Complaint::create([
            'user_id' => auth()->user()->id,
            'complaint_number' => 'C-' . Str::random(8),
            'description' => $validatedData['description'],
            'incident_date' => $validatedData['incident_date'],
            'status' => 'pending',
            'court_name' => $validatedData['court_name'],
            'judge_name' => $validatedData['judge_name'],
            'prosecutor_name' => $validatedData['prosecutor_name'],
            'prosecutor_number' => $validatedData['prosecutor_number'],
            'prosecutor_email' => $validatedData['prosecutor_email'],
            'defendant_status' => $validatedData['defendant_status'],
            'victim_id' => $user->id,
        ]);

        Officer::create([
            'complaint_id' => $complaint->id,
            'name' => $validatedData['officer_name'],
        ]);

        if ($request->hasFile('attachments')) {
            foreach ($request->file('attachments') as $attachment) {
                $path = $attachment->store('public');
                $complaint->attachments()->create([
                    'file_path' => $path,
                    'file_name' => $complaint->id . '-' . $attachment->getClientOriginalName(),
                ]);
            }
        }

        if (isset($validatedData['witnesses'])) {
            foreach ($validatedData['witnesses'] as $witness) {
                $complaint->witnesses()->create($witness);
            }
        }

        $this->notify($complaint);

        return redirect()->route('complaints.thank-you', ['complaint' => $complaint]);
    }

    public function show(Complaint $complaint)
    {
        $complaint->load(['attachments', 'officer', 'witnesses', 'notes']);
        return view('complaints.show', compact('complaint'));
    }

    public function thankYou(Complaint $complaint)
    {
        return view('complaints.thank-you', ['complaint' => $complaint]);
    }

    public function searchForm()
    {
        // only allow admins to search
        if (!auth()->guest() && auth()->user()->role !== 'admin') {
            return redirect('/');
        }

        return view('complaints.search');
    }

    public function search(Request $request)
    {
        $query = $request->input('query');

        $results = Complaint::where(function ($q) use ($query) {
            $q->where('complaint_number', 'LIKE', "%$query%")
                ->orWhereHas('user', function ($q) use ($query) {
                    $q->where('name', 'LIKE', "%$query%");
                });
        })
            ->where('status', 'completed')
            ->get();

        return view('complaints.results', [
            'results' => $results,
            'query' => $query
        ]);
    }

    private function notify(Complaint $complaint): void
    {
        $admins = User::where('role', 'admin')->get();
        foreach ($admins as $admin) {
            $admin->notify(new NewComplaintSubmitted($complaint));
        }
    }

    public function addAttachment(Request $request, Complaint $complaint)
    {
        $request->validate([
            'attachment' => 'required|file|mimes:jpg,jpeg,png,gif,mp4,pdf,doc,docx|max:10240',
        ]);

        if ($request->hasFile('attachment')) {
            $path = $request->file('attachment')->store('public');
            $complaint->attachments()->create([
                'file_path' => $path,
                'file_name' => $complaint->id . '-' . $request->file('attachment')->getClientOriginalName(),
            ]);
        }

        return redirect()->route('complaints.show', $complaint);
    }
}
